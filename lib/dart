
class HomePage extends StatefulWidget {
  HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {

  // @override
  // void initState() {
  //   super.initState();
  //   WidgetsBinding.instance!.addPostFrameCallback((_) {
  //     _fetchInitialData(context);
  //   });
  // }
  //
  // Future<void> _fetchInitialData(BuildContext context) async {
  //   final finService = Provider.of<UserService>(context, listen: false);
  //   final authService = Provider.of<AuthService>(context, listen: false);
  //   final userModel = await authService.getCurrentUser();
  //   if (userModel != null) {
  //     finService.calculateTotalIncomeForUser(userModel.id);
  //     finService.calculateTotalExpenseForUser(userModel.id);
  //   }
  // }

  @override
  Widget build(BuildContext context) {

    final authService=Provider.of<AuthService>(context);
    final finService=Provider.of<UserService>(context);

    return Scaffold(
      appBar: AppBar(),
      body: Consumer<AuthService>(
        builder: (context, authService, child){
          return FutureBuilder<UserModel?>(
            future: authService.getCurrentUser(),
            builder: (context, snapshot){
              if(snapshot.connectionState == ConnectionState.waiting){
                return const Center(
                  child: CircularProgressIndicator(),
                );
              }else{
                if(snapshot.hasData){
                  final userData=snapshot.data;
                  return Container(
                    height: double.infinity,
                    width: double.infinity,
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Container(
                              child: Row(
                                children: [
                                  AppText(data: "Welcome", color: Colors.white, size: 18,),
                                  const SizedBox(width: 10,),
                                  AppText(data: userData!.name, color: Colors.white, size: 26,),
                                ],
                              ),
                            ),
                            InkWell(
                              onTap: (){
                                Navigator.pushNamed(context, 'profile');
                              },
                              child: CircleAvatar(
                                child: Text(userData.name[0].toUpperCase()),
                              ),
                            )
                          ],
                        ),
                        const MyDivider(),
                        const SizedBox(height: 20,),
                        DashboardWidget(
                          onTap1: (){},
                          textOne: 'Expanse\n ${finService.totalExpense}',
                          onTap2: (){
                            Navigator.pushNamed(context, 'incomelist', );
                          },
                          textTwo: 'Income\n ${finService.totalIncome}',
                        ),
                        const SizedBox(height: 15,),
                        DashboardWidget(
                            onTap1: (){
                              Navigator.pushNamed(context, 'addExpense', arguments: userData.id);
                            },
                            textOne: 'Add Expanse',
                            onTap2: (){
                              Navigator.pushNamed(context, 'addIncome', arguments: userData.id);
                            },
                            textTwo: 'Add Income'),
                        Container(
                          padding: const EdgeInsets.all(20),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              AppText(data: 'Income vs Expense', color: Colors.white,),
                              const SizedBox(height: 20,),
                              AspectRatio(
                                aspectRatio: 1.3,
                                child: PieChart(
                                  PieChartData(
                                    sectionsSpace: 5,
                                    sections: [
                                      PieChartSectionData(
                                        radius: 50,
                                        color: chartColor1,
                                        value: finService.totalExpense,
                                        title: 'Expense',
                                      ),
                                      PieChartSectionData(
                                        radius: 50,
                                        color: chartColor2,
                                        value: finService.totalIncome,
                                        title: 'Income',
                                      ),
                                    ]
                                  )
                                ),
                              )
                            ],
                          ),
                        )

                      ],
                    ),
                  );
                }else{
                  return const Center(child: CircularProgressIndicator(),);
                }
              }
            },
          );
        },
      ),
    );
  }
}
